cps 0.5
bps(140/120)

do
d1 silence
m1 silence

m1 $ merge (discretise (1/2) $ "7")

let fluxxx = spaceOut([1,0.95..0.5]++[0.25,0.3..1])

let pattern rotation notenumber = rotL rotation $ fluxxx $ n ("0*8" + (4 ~> (discretise (1/4) $ choose hirajoshi)) ) |+| n notenumber
    merge noteScale = stack[ pattern 0 0, pattern 0 (-12), pattern 0 (-24)]
          #velocity(slow 16 $ scale 0.25 0.6 $ sine)
          #dur(slow 16 $ scale 0.25 1 $ sine)
          |+|n noteScale


d1
$ sound "{stabfx:5/4}"
#sustain 8
#release 8
#cutoff (2 * 1000)

let mute = (const $ sound "")

d1 $ inside 2 (whenmod 6 5 (stut 16 0.25 (2/4)))
$ foldEvery[2,3](666 ~>)
$ stack [
every 2 (chop 4)
$ slow 4
$ stut' (4)(0.125*3)(|=| crush 4)
$ sound (samples "stabfx*4" (irand 15))
#cut 3
#shape 0.2,
degradeBy 0.3 $ density 2 $ sound (samples "akuma5*8" (irand 15)) #unit "c" #speed 8,
slow 2 $ struct "~ 1 [~ 1] ~" $ sound "smash"
]

d1 silence

d1 $ sound "arpy*4"
d1 $ whenmod 2 1 (|*| speed 2) $ s "arpy*4"
d1 $ fast 2 $ whenmod 2 1 (|*| speed 2) $ s "arpy*4"
d1 $ inside 2 (whenmod 2 1 (|*| speed 2)) $ s "arpy*4" -- inside scale the time flowing to pattern manipulator w/o scaling time flowing through the pattern it is manipulating.
d1 $ fast 2 $ whenmod 2 1 (|*| speed 2) $ slow 2 $ s "arpy*4" -- equivalent to above statement.

let getout = (const $ sound "")

bps (140/120)

d1 $ inside 2 (whenmod 7 6 ((zoom (0.25, 0.75)).(stut 8 0.25 (2/4))) )
$ stack [
inside 4 (whenmod 3 2 (|*| accelerate "[1 -1]"))
$ foldEvery [3,4,5,6] ((1/4) <~)
$ chop 8 $ s (samples "akuma5" (irand 12)) #unit "c" #speed 4
|*| release 0.3,
stut 16 0.5 4 $ up "[0,3,5]/4"
|*| speed 2
# s "moog"
# release 1.5 |*| gain 0.7
]

cps 0.5

----------------------------------------------------------------------------------------------------


-- coded by prrr. from rocketchat channal.

import qualified Sound.Tidal.Scales as Scales

d1 $ n (toScale (Scales.lydian) ("[0 3] 5]" + ("0 1" *(slow 2 $ run 2)) - 12)) # s "supersaw"

-- make chord from scale
d3
$ n (toScale (Scales.lydian) ("{0,4,12}" + "<0 1 2 4>" ))
# s "supersaw"
# lpf 300
# attack 1.0
# release 6.0


-- interesting piano sound with little distortion using vowel "o" and shape 0.95
d4 $ slow 8
$ n (toScale (Scales.harmonicMinor) ("0 [1 2] [0 ~ 0 1] [2 3]" + 2))
# s "superpiano"
# vowel "o"
# shape 0.95
# release 3
# sustain 10.0
# cutoff 1000
# crush 6
-- # bandq 2.5


-----------------------------------------------------------------------------------------------

-- Coded by danielmkarlsson, Rocketchat.

d1
$ sometimesBy (1/5) (spread _fast [1,1,1,1,1])
$ fast 1.125
$ sometimesBy 0.75 (iter(choose [8,8,8,4]))
$ degradeBy (1/8)
$ s "bass1*8"
# n (slow 0.1 $ choose [2..5])
# pan (slow 0.11 $ rand)
# cut (slow 0.12 $ choose [0,0,0,1])
# gain (slow 0.13 $ scalex 2 3 $ rand)
# speed (discretise (1/3) $ slow 0.14 $ scalex 1 3 $ rand)
# shape (discretise (1/5) $ slow 0.15 $ scalex 0.1 0.9999 $ rand)
# lpf (discretise (1/7) $ slow 0.16 $ scale 800 20000 $ rand)
# rel (discretise (1/9) $ slow 0.17 $ scalex 0.075 0.75 $ rand)
# orbit 1
# delay (1/20)
# delayt (discretise (1/11) $ slow 0.18 $ 1 / choose [64,128,256,512,1024,2048] * choose [1..9])
# delayfb 0.95
# hpf 150
# accelerate (discretise (1/13) $ slow 0.19 $ scalex (1/2048) (1/64) $ rand)
